// Database Analyzer - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ë–î —á–µ—Ä–µ–∑ Supabase
import { supabase } from '@/integrations/supabase/client';

export interface TableInfo {
  name: string;
  columns: ColumnInfo[];
  constraints: ConstraintInfo[];
  indexes: IndexInfo[];
  rowCount?: number;
}

export interface ColumnInfo {
  name: string;
  type: string;
  nullable: boolean;
  defaultValue?: string;
  isPrimaryKey: boolean;
  isForeignKey: boolean;
  foreignTable?: string;
  foreignColumn?: string;
}

export interface ConstraintInfo {
  name: string;
  type: 'PRIMARY KEY' | 'FOREIGN KEY' | 'UNIQUE' | 'CHECK';
  columns: string[];
  referencedTable?: string;
  referencedColumns?: string[];
}

export interface IndexInfo {
  name: string;
  columns: string[];
  unique: boolean;
  definition: string;
}

export interface DatabaseSchema {
  tables: TableInfo[];
  functions: FunctionInfo[];
  enums: EnumInfo[];
  totalTables: number;
  lastAnalyzed: string;
}

export interface FunctionInfo {
  name: string;
  arguments: string;
  returnType: string;
  language: string;
}

export interface EnumInfo {
  name: string;
  values: string[];
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑—É –ë–î
export async function analyzeDatabaseSchema(): Promise<DatabaseSchema> {
  console.log('üîç –ü–æ—á–∏–Ω–∞—é –∞–Ω–∞–ª—ñ–∑ —Å—Ö–µ–º–∏ –ë–î...');
  
  try {
    const [tables, functions, enums] = await Promise.all([
      getAllTables(),
      getAllFunctions(),
      getAllEnums()
    ]);

    const schema: DatabaseSchema = {
      tables,
      functions,
      enums,
      totalTables: tables.length,
      lastAnalyzed: new Date().toISOString()
    };

    console.log(`‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${tables.length} —Ç–∞–±–ª–∏—Ü—å –∑–Ω–∞–π–¥–µ–Ω–æ`);
    return schema;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ë–î:', error);
    throw error;
  }
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
async function getAllTables(): Promise<TableInfo[]> {
  try {
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ RPC —Ñ—É–Ω–∫—Ü—ñ—é
    const { data: tablesData, error: tablesError } = await supabase.rpc('get_tables_info');
    
    if (!tablesError && tablesData) {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ RPC –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const tables: TableInfo[] = [];
      for (const tableInfo of tablesData) {
        const table: TableInfo = {
          name: tableInfo.table_name,
          columns: await getTableColumns(tableInfo.table_name),
          constraints: await getTableConstraints(tableInfo.table_name),
          indexes: await getTableIndexes(tableInfo.table_name),
          rowCount: tableInfo.estimated_rows
        };
        tables.push(table);
      }
      return tables;
    }
  } catch (error) {
    console.warn('RPC —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback');
  }
  
  // Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
  return await getFallbackTables();
}

// Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
async function getFallbackTables(): Promise<TableInfo[]> {
  // –°–∏–º—É–ª—é—î–º–æ –±–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ information_schema
  const basicTables = [
    'profiles', 'listings', 'categories', 'favorites', 'messages', 
    'listing_likes', 'listing_stats', 'saved_searches', 'notifications'
  ];
  
  const tables: TableInfo[] = [];
  
  for (const tableName of basicTables) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç
      const { error } = await supabase
        .from(tableName)
        .select('*')
        .limit(0);
        
      if (!error) {
        // –¢–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î, –¥–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        const table: TableInfo = {
          name: tableName,
          columns: await getFallbackColumns(tableName),
          constraints: [],
          indexes: [],
          rowCount: await getFallbackRowCount(tableName)
        };
        tables.push(table);
      }
    } catch (error) {
      // –¢–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É
      console.log(`–¢–∞–±–ª–∏—Ü—è ${tableName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
    }
  }
  
  return tables;
}

// Fallback –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
async function getFallbackColumns(tableName: string): Promise<ColumnInfo[]> {
  // –ë–∞–∑–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
  const commonColumns: { [key: string]: ColumnInfo[] } = {
    profiles: [
      { name: 'id', type: 'uuid', nullable: false, isPrimaryKey: true, isForeignKey: false },
      { name: 'email', type: 'text', nullable: true, isPrimaryKey: false, isForeignKey: false },
      { name: 'created_at', type: 'timestamptz', nullable: false, isPrimaryKey: false, isForeignKey: false }
    ],
    listings: [
      { name: 'id', type: 'uuid', nullable: false, isPrimaryKey: true, isForeignKey: false },
      { name: 'title', type: 'text', nullable: false, isPrimaryKey: false, isForeignKey: false },
      { name: 'description', type: 'text', nullable: true, isPrimaryKey: false, isForeignKey: false },
      { name: 'price', type: 'numeric', nullable: true, isPrimaryKey: false, isForeignKey: false },
      { name: 'user_id', type: 'uuid', nullable: false, isPrimaryKey: false, isForeignKey: true, foreignTable: 'profiles', foreignColumn: 'id' },
      { name: 'category_id', type: 'uuid', nullable: true, isPrimaryKey: false, isForeignKey: true, foreignTable: 'categories', foreignColumn: 'id' },
      { name: 'status', type: 'text', nullable: false, isPrimaryKey: false, isForeignKey: false },
      { name: 'created_at', type: 'timestamptz', nullable: false, isPrimaryKey: false, isForeignKey: false }
    ],
    categories: [
      { name: 'id', type: 'uuid', nullable: false, isPrimaryKey: true, isForeignKey: false },
      { name: 'name', type: 'text', nullable: false, isPrimaryKey: false, isForeignKey: false },
      { name: 'parent_id', type: 'uuid', nullable: true, isPrimaryKey: false, isForeignKey: true, foreignTable: 'categories', foreignColumn: 'id' },
      { name: 'created_at', type: 'timestamptz', nullable: false, isPrimaryKey: false, isForeignKey: false }
    ]
  };
  
  return commonColumns[tableName] || [
    { name: 'id', type: 'uuid', nullable: false, isPrimaryKey: true, isForeignKey: false },
    { name: 'created_at', type: 'timestamptz', nullable: false, isPrimaryKey: false, isForeignKey: false }
  ];
}

// Fallback –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ä—è–¥–∫—ñ–≤
async function getFallbackRowCount(tableName: string): Promise<number> {
  try {
    const { count, error } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });
      
    if (error) return 0;
    return count || 0;
  } catch (error) {
    return 0;
  }
}

// –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é
async function getTableDetails(tableName: string): Promise<TableInfo> {
  const [columns, constraints, indexes, rowCount] = await Promise.all([
    getTableColumns(tableName),
    getTableConstraints(tableName),
    getTableIndexes(tableName),
    getTableRowCount(tableName)
  ]);

  return {
    name: tableName,
    columns,
    constraints,
    indexes,
    rowCount
  };
}

// –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
async function getTableColumns(tableName: string): Promise<ColumnInfo[]> {
  try {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQL –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü—ñ—é
    const { data, error } = await supabase.rpc('get_table_columns', { 
      table_name_param: tableName 
    });
    
    if (error) {
      // Fallback: –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Ç (–º–æ–∂–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ RLS)
      console.warn(`Fallback –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ ${tableName}`);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ${tableName}:`, error);
    return [];
  }
}

// –û–±–º–µ–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async function getTableConstraints(tableName: string): Promise<ConstraintInfo[]> {
  try {
    const { data, error } = await supabase.rpc('get_table_constraints', {
      table_name_param: tableName
    });
    
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω—å –¥–ª—è ${tableName}:`, error);
    return [];
  }
}

// –Ü–Ω–¥–µ–∫—Å–∏ —Ç–∞–±–ª–∏—Ü—ñ
async function getTableIndexes(tableName: string): Promise<IndexInfo[]> {
  try {
    const { data, error } = await supabase.rpc('get_table_indexes', {
      table_name_param: tableName
    });
    
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è ${tableName}:`, error);
    return [];
  }
}

// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
async function getTableRowCount(tableName: string): Promise<number> {
  try {
    // –î–ª—è –±–µ–∑–ø–µ–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º—ñ—Å—Ç—å COUNT(*)
    const { data, error } = await supabase.rpc('get_table_row_count', {
      table_name_param: tableName
    });
    
    if (error) return 0;
    return data || 0;
  } catch (error) {
    return 0;
  }
}

// –§—É–Ω–∫—Ü—ñ—ó –≤ –ë–î
async function getAllFunctions(): Promise<FunctionInfo[]> {
  try {
    const { data, error } = await supabase.rpc('get_database_functions');
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π:', error);
    return [];
  }
}

// ENUM —Ç–∏–ø–∏
async function getAllEnums(): Promise<EnumInfo[]> {
  try {
    const { data, error } = await supabase.rpc('get_database_enums');
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ENUM —Ç–∏–ø—ñ–≤:', error);
    return [];
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
export function generateMigrationFromAnalysis(
  currentSchema: DatabaseSchema,
  desiredChanges: string[]
): string {
  const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
  const migrationName = `${timestamp}_auto_generated_migration.sql`;
  
  let migration = `-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
-- –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')}
-- –ë–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –∞–Ω–∞–ª—ñ–∑—ñ ${currentSchema.tables.length} —Ç–∞–±–ª–∏—Ü—å

`;

  // –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω–∏
  desiredChanges.forEach((change, index) => {
    migration += `-- –ó–º—ñ–Ω–∞ ${index + 1}: ${change}\n`;
    migration += generateChangeSQL(change, currentSchema);
    migration += '\n\n';
  });

  return migration;
}

// –ì–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è SQL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∑–º—ñ–Ω–∏
function generateChangeSQL(change: string, schema: DatabaseSchema): string {
  // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∑–º—ñ–Ω
  if (change.includes('add index')) {
    return generateIndexSQL(change, schema);
  } else if (change.includes('add column')) {
    return generateColumnSQL(change, schema);
  } else {
    return `-- TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ${change}`;
  }
}

function generateIndexSQL(change: string, schema: DatabaseSchema): string {
  // –ü—Ä–∏–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω–¥–µ–∫—Å—É
  return `CREATE INDEX IF NOT EXISTS idx_auto_generated 
ON some_table (some_column);`;
}

function generateColumnSQL(change: string, schema: DatabaseSchema): string {
  // –ü—Ä–∏–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–ª–æ–Ω–∫–∏
  return `ALTER TABLE some_table 
ADD COLUMN new_column TEXT;`;
}

// –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–≤–æ—Ö —Å—Ö–µ–º –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω
export function compareSchemas(
  oldSchema: DatabaseSchema,
  newSchema: DatabaseSchema
): string[] {
  const changes: string[] = [];
  
  // –ù–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
  const newTables = newSchema.tables.filter(
    newTable => !oldSchema.tables.find(oldTable => oldTable.name === newTable.name)
  );
  
  newTables.forEach(table => {
    changes.push(`–î–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è: ${table.name}`);
  });
  
  // –í–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
  const deletedTables = oldSchema.tables.filter(
    oldTable => !newSchema.tables.find(newTable => newTable.name === oldTable.name)
  );
  
  deletedTables.forEach(table => {
    changes.push(`–í–∏–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: ${table.name}`);
  });
  
  // –ó–º—ñ–Ω–∏ –≤ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö
  newSchema.tables.forEach(newTable => {
    const oldTable = oldSchema.tables.find(t => t.name === newTable.name);
    if (oldTable) {
      const tableChanges = compareTableStructure(oldTable, newTable);
      changes.push(...tableChanges);
    }
  });
  
  return changes;
}

function compareTableStructure(oldTable: TableInfo, newTable: TableInfo): string[] {
  const changes: string[] = [];
  
  // –ù–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
  const newColumns = newTable.columns.filter(
    newCol => !oldTable.columns.find(oldCol => oldCol.name === newCol.name)
  );
  
  newColumns.forEach(col => {
    changes.push(`–î–æ–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ${col.name} –≤ —Ç–∞–±–ª–∏—Ü—é ${newTable.name}`);
  });
  
  return changes;
}