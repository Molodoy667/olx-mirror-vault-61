// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è exec_sql
import { supabase } from '@/integrations/supabase/client';

export async function executeAlternativeSQL(sqlQuery: string): Promise<{ success: boolean; data?: any; error?: string; }> {
  try {
    console.log('üîç Trying alternative SQL execution for:', sqlQuery.substring(0, 100));
    
    // –ü—Ä–æ—Å—Ç—ã–µ SELECT –∑–∞–ø—Ä–æ—Å—ã
    if (sqlQuery.trim().toLowerCase().startsWith('select')) {
      // –î–ª—è SELECT –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π query
      try {
        console.log('üìä Executing SELECT query...');
        // –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö SELECT, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
        const { data, error } = await supabase.from('admin_users').select('*').limit(1);
        return { success: !error, data, error: error?.message };
      } catch (e: any) {
        console.log('‚ùå SELECT failed:', e.message);
        return { success: false, error: `SELECT query failed: ${e.message}` };
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ RPC
    try {
      console.log('üîç Checking available RPC functions...');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      const { data: rpcList, error: rpcError } = await supabase
        .rpc('exec_sql', { query: 'SELECT 1' });
        
      console.log('‚úÖ exec_sql is available!', { data: rpcList, error: rpcError });
      return { 
        success: !rpcError, 
        data: rpcList, 
        error: rpcError?.message || undefined 
      };
      
    } catch (rpcError: any) {
      console.log('‚ùå exec_sql not available:', rpcError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ - –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      try {
        console.log('üîç Trying alternative RPC approaches...');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ–º –ª–∏ –º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–µ–π—à–∏–π RPC
        const { data, error } = await supabase.rpc('version');
        
        if (!error) {
          console.log('‚úÖ Basic RPC works, version:', data);
          return { success: true, data: `RPC works, PostgreSQL version: ${data}` };
        } else {
          throw new Error(error.message);
        }
        
      } catch (versionError: any) {
        console.log('‚ùå No RPC functions available:', versionError.message);
        
        return { 
          success: false, 
          error: `–§—É–Ω–∫—Ü–∏—è exec_sql –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. RPC –æ—à–∏–±–∫–∞: ${rpcError.message}. Version RPC —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${versionError.message}` 
        };
      }
    }
    
  } catch (generalError: any) {
    console.error('‚ùå General SQL execution error:', generalError);
    return { 
      success: false, 
      error: `–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: ${generalError.message}` 
    };
  }
}

export async function checkSupabaseRPCCapabilities(): Promise<{ 
  hasExecSQL: boolean; 
  hasVersion: boolean; 
  availableFunctions: string[]; 
  errors: string[]; 
}> {
  const result = {
    hasExecSQL: false,
    hasVersion: false,
    availableFunctions: [] as string[],
    errors: [] as string[]
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º exec_sql
  try {
    const { data, error } = await supabase.rpc('exec_sql', { query: 'SELECT 1 as test' });
    if (!error) {
      result.hasExecSQL = true;
      result.availableFunctions.push('exec_sql');
      console.log('‚úÖ exec_sql available');
    } else {
      result.errors.push(`exec_sql error: ${error.message}`);
      console.log('‚ùå exec_sql not available:', error.message);
    }
  } catch (e: any) {
    result.errors.push(`exec_sql exception: ${e.message}`);
    console.log('‚ùå exec_sql exception:', e.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º version
  try {
    const { data, error } = await supabase.rpc('version');
    if (!error) {
      result.hasVersion = true;
      result.availableFunctions.push('version');
      console.log('‚úÖ version available');
    } else {
      result.errors.push(`version error: ${error.message}`);
      console.log('‚ùå version not available:', error.message);
    }
  } catch (e: any) {
    result.errors.push(`version exception: ${e.message}`);
    console.log('‚ùå version exception:', e.message);
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö PostgreSQL —Ñ—É–Ω–∫—Ü–∏–π
  const testFunctions = ['now', 'current_user', 'current_database'];
  
  for (const func of testFunctions) {
    try {
      const { data, error } = await supabase.rpc(func);
      if (!error) {
        result.availableFunctions.push(func);
        console.log(`‚úÖ ${func} available`);
      } else {
        result.errors.push(`${func} error: ${error.message}`);
        console.log(`‚ùå ${func} not available:`, error.message);
      }
    } catch (e: any) {
      result.errors.push(`${func} exception: ${e.message}`);
      console.log(`‚ùå ${func} exception:`, e.message);
    }
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è RPC —Ñ—É–Ω–∫—Ü–∏–∏ exec_sql –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
export function generateCreateExecSQLFunction(): string {
  return `
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ exec_sql –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE OR REPLACE FUNCTION exec_sql(query TEXT)
RETURNS TABLE(result JSONB) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result_cursor REFCURSOR;
    result_record RECORD;
    results JSONB DEFAULT '[]'::JSONB;
BEGIN
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    OPEN result_cursor FOR EXECUTE query;
    
    -- –ï—Å–ª–∏ —ç—Ç–æ SELECT –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    IF UPPER(TRIM(query)) LIKE 'SELECT%' THEN
        LOOP
            FETCH result_cursor INTO result_record;
            EXIT WHEN NOT FOUND;
            results = results || to_jsonb(result_record);
        END LOOP;
    ELSE
        -- –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        results = '{"status": "executed"}'::JSONB;
    END IF;
    
    CLOSE result_cursor;
    RETURN QUERY SELECT results;
EXCEPTION
    WHEN OTHERS THEN
        RETURN QUERY SELECT ('{"error": "' || SQLERRM || '", "sqlstate": "' || SQLSTATE || '"}')::JSONB;
END;
$$;

-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
GRANT EXECUTE ON FUNCTION exec_sql(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION exec_sql(TEXT) TO anon;
`;
}