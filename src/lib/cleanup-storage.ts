// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ localStorage –æ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

export function cleanupLocalStorage() {
  try {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    const keysToRemove = [
      'backup-list',        // –û–≥—Ä–æ–º–Ω—ã–µ –±–µ–∫–∞–ø—ã —Å–∞–π—Ç–∞
      'backup-configs',     // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∫–∞–ø–æ–≤
      'admin_settings',     // –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      'site-backup-data',   // –î–∞–Ω–Ω—ã–µ –±–µ–∫–∞–ø–æ–≤
      'database-backup',    // –ë–µ–∫–∞–ø—ã –ë–î
    ];

    let totalCleaned = 0;
    
    keysToRemove.forEach(key => {
      const item = localStorage.getItem(key);
      if (item) {
        const size = new Blob([item]).size;
        totalCleaned += size;
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω ${key}: ${formatBytes(size)}`);
      }
    });

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å backup-
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('backup-') || key.startsWith('admin-backup-')) {
        const item = localStorage.getItem(key);
        if (item) {
          const size = new Blob([item]).size;
          totalCleaned += size;
          localStorage.removeItem(key);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω ${key}: ${formatBytes(size)}`);
        }
      }
    });

    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ localStorage: ${formatBytes(totalCleaned)}`);
    return totalCleaned;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error);
    return 0;
  }
}

export function getLocalStorageSize(): number {
  let total = 0;
  try {
    Object.keys(localStorage).forEach(key => {
      const item = localStorage.getItem(key);
      if (item) {
        total += new Blob([item]).size;
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ localStorage:', error);
  }
  return total;
}

export function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

export function getLocalStorageReport(): { key: string; size: number; sizeFormatted: string }[] {
  const report: { key: string; size: number; sizeFormatted: string }[] = [];
  
  try {
    Object.keys(localStorage).forEach(key => {
      const item = localStorage.getItem(key);
      if (item) {
        const size = new Blob([item]).size;
        report.push({
          key,
          size,
          sizeFormatted: formatBytes(size)
        });
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    report.sort((a, b) => b.size - a.size);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ localStorage:', error);
  }
  
  return report;
}