import { supabase } from '@/integrations/supabase/client';
import { formatUserAgent } from './userAgent';

export const createLoginNotification = async (userId: string) => {
  try {
    const userAgent = await formatUserAgent();
    const currentTime = new Date().toLocaleString('uk-UA', {
      timeZone: 'Europe/Kiev',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    await supabase.rpc('create_notification', {
      target_user_id: userId,
      notification_type: 'login_success',
      notification_title: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      notification_message: `–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É ${currentTime}. –ü—Ä–∏—Å—Ç—Ä—ñ–π: ${userAgent}`,
      notification_data: {
        login_time: new Date().toISOString(),
        user_agent: navigator.userAgent,
        timestamp: Date.now()
      }
    });
  } catch (error) {
    console.error('Error creating login notification:', error);
  }
};

export const createRegistrationNotification = async (userId: string) => {
  try {
    const userAgent = await formatUserAgent();
    const currentTime = new Date().toLocaleString('uk-UA', {
      timeZone: 'Europe/Kiev',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    await supabase.rpc('create_notification', {
      target_user_id: userId,
      notification_type: 'registration_success',
      notification_title: '–í—ñ—Ç–∞—î–º–æ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é! üéâ',
      notification_message: `–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å ${currentTime}. –ü—Ä–∏—Å—Ç—Ä—ñ–π: ${userAgent}`,
      notification_data: {
        registration_time: new Date().toISOString(),
        user_agent: navigator.userAgent,
        timestamp: Date.now()
      }
    });
  } catch (error) {
    console.error('Error creating registration notification:', error);
  }
};

export const createPriceOfferNotification = async (
  listingOwnerId: string,
  listingTitle: string,
  offeredPrice: number,
  offerUserId: string
) => {
  try {
    await supabase.rpc('create_notification', {
      target_user_id: listingOwnerId,
      notification_type: 'price_offer',
      notification_title: '–ù–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Ü—ñ–Ω–∏',
      notification_message: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ —Ü—ñ–Ω—É ${offeredPrice} –≥—Ä–Ω –∑–∞ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è "${listingTitle}"`,
      notification_data: {
        listing_title: listingTitle,
        offered_price: offeredPrice,
        offer_user_id: offerUserId,
        timestamp: Date.now()
      }
    });
  } catch (error) {
    console.error('Error creating price offer notification:', error);
  }
};

export const createListingMessageNotification = async (
  receiverId: string,
  listingTitle: string,
  senderId: string,
  listingId: string
) => {
  try {
    await supabase.rpc('create_notification', {
      target_user_id: receiverId,
      notification_type: 'new_message',
      notification_title: '–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
      notification_message: `–í–∞–º –Ω–∞–¥—ñ–π—à–ª–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è "${listingTitle}"`,
      notification_data: {
        listing_title: listingTitle,
        listing_id: listingId,
        sender_id: senderId,
        timestamp: Date.now()
      }
    });
  } catch (error) {
    console.error('Error creating listing message notification:', error);
  }
};