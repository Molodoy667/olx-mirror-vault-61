/**
 * SEO utilities for generating friendly URLs
 */

import { supabase } from '@/integrations/supabase/client';

// –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
const transliterationMap: Record<string, string> = {
  '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'h', '“ë': 'g', '–¥': 'd', '–µ': 'e', '—î': 'ye',
  '–∂': 'zh', '–∑': 'z', '–∏': 'y', '—ñ': 'i', '—ó': 'yi', '–π': 'y', '–∫': 'k', '–ª': 'l',
  '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
  '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch', '—å': '',
  '—é': 'yu', '—è': 'ya',
  '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'H', '“ê': 'G', '–î': 'D', '–ï': 'E', '–Ñ': 'Ye',
  '–ñ': 'Zh', '–ó': 'Z', '–ò': 'Y', '–Ü': 'I', '–á': 'Yi', '–ô': 'Y', '–ö': 'K', '–õ': 'L',
  '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
  '–§': 'F', '–•': 'Kh', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Shch', '–¨': '',
  '–Æ': 'Yu', '–Ø': 'Ya'
};

/**
 * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
 */
export function transliterate(text: string): string {
  return text
    .split('')
    .map(char => transliterationMap[char] || char)
    .join('');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SEO-friendly slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
export function generateSlug(title: string): string {
  return transliterate(title)
    .toLowerCase()
    .trim()
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-')
    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/^-+|-+$/g, '')
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    .substring(0, 60);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤
 */
export function generateRandomId(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç SEO URL –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export async function getOrCreateSeoUrl(listingId: string, title: string): Promise<string> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SEO URL
    const { data: existingUrl } = await supabase
      .from('seo_urls')
      .select('full_url')
      .eq('listing_id', listingId)
      .single();

    if (existingUrl) {
      return existingUrl.full_url;
    }

    // –ï—Å–ª–∏ SEO URL –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const slug = generateSlug(title);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π listing ID (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤)
    const cleanId = listingId.replace(/-/g, '');
    const seoId = cleanId.length >= 8 ? cleanId.substring(0, 8).toUpperCase() : cleanId.toUpperCase();
    const fullUrl = `/${slug}-${seoId}`;
    
    console.log('üîç Creating SEO URL:', { listingId, slug, seoId, fullUrl });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const { error } = await supabase
      .from('seo_urls')
      .insert({
        listing_id: listingId,
        slug,
        seo_id: seoId,
        full_url: fullUrl
      });

    if (error) {
      console.error('Error creating SEO URL:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
      return `/listing/${listingId}`;
    }

    return fullUrl;
  } catch (error) {
    console.error('Error in getOrCreateSeoUrl:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    return `/listing/${listingId}`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç SEO URL –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è)
 */
export async function getSeoUrl(listingId: string): Promise<string | null> {
  try {
    const { data } = await supabase
      .from('seo_urls')
      .select('full_url')
      .eq('listing_id', listingId)
      .single();

    return data?.full_url || null;
  } catch (error) {
    console.error('Error getting SEO URL:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ SEO URL
 */
export async function getListingIdBySeoUrl(seoUrl: string): Promise<string | null> {
  try {
    const { data } = await supabase
      .from('seo_urls')
      .select('listing_id')
      .eq('full_url', seoUrl)
      .single();

    return data?.listing_id || null;
  } catch (error) {
    console.error('Error getting listing ID by SEO URL:', error);
    return null;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç SEO URL –¥–ª—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */
export async function regenerateAllSeoUrls(): Promise<{ success: number; errors: number }> {
  try {
    let success = 0;
    let errors = 0;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    const { data: listings, error: listingsError } = await supabase
      .from('listings')
      .select('id, title')
      .eq('status', 'active');

    if (listingsError) {
      console.error('Error fetching listings:', listingsError);
      return { success: 0, errors: 1 };
    }

    if (!listings || listings.length === 0) {
      console.log('No active listings found');
      return { success: 0, errors: 0 };
    }

    console.log(`üîÑ Regenerating SEO URLs for ${listings.length} listings...`);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ SEO URL
    const { error: deleteError } = await supabase
      .from('seo_urls')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ

    if (deleteError) {
      console.error('Error deleting old SEO URLs:', deleteError);
    } else {
      console.log('‚úÖ Deleted all old SEO URLs');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ SEO URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    for (const listing of listings) {
      try {
        const slug = generateSlug(listing.title);
        const cleanId = listing.id.replace(/-/g, '');
        const seoId = cleanId.length >= 8 ? cleanId.substring(0, 8).toUpperCase() : cleanId.toUpperCase();
        const fullUrl = `/${slug}-${seoId}`;

        const { error: insertError } = await supabase
          .from('seo_urls')
          .insert({
            listing_id: listing.id,
            slug: slug,
            seo_id: seoId,
            full_url: fullUrl
          });

        if (insertError) {
          console.error(`‚ùå Error creating SEO URL for ${listing.id}:`, insertError);
          errors++;
        } else {
          console.log(`‚úÖ Created SEO URL for ${listing.title}: ${fullUrl}`);
          success++;
        }
      } catch (error) {
        console.error(`‚ùå Error processing listing ${listing.id}:`, error);
        errors++;
      }
    }

    console.log(`üéâ Regeneration complete: ${success} success, ${errors} errors`);
    return { success, errors };
  } catch (error) {
    console.error('Error in regenerateAllSeoUrls:', error);
    return { success: 0, errors: 1 };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π SEO-friendly URL –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getOrCreateSeoUrl
 */
export function generateListingUrl(title: string, id: string): string {
  const slug = generateSlug(title);
  const randomId = generateRandomId();
  return `/${slug}-${randomId}`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ SEO-friendly URL (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getListingIdBySeoUrl
 */
export function extractListingIdFromUrl(url: string): string | null {
  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6-8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ—Ñ–∏—Å–∞
  const match = url.match(/-([a-zA-Z0-9]{6,8})$/);
  return match ? match[1] : null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL SEO-friendly
 */
export function isSeoUrl(url: string): boolean {
  // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —è–∫ 6-—Å–∏–º–≤–æ–ª—å–Ω—ñ (—Å—Ç–∞—Ä—ñ), —Ç–∞–∫ —ñ 8-—Å–∏–º–≤–æ–ª—å–Ω—ñ (–Ω–æ–≤—ñ) SEO ID
  return /^\/[a-z0-9-]+-[a-zA-Z0-9]{6,8}$/.test(url);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π slug –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export function generateCategorySlug(name: string): string {
  return transliterate(name)
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-+|-+$/g, '')
    .substring(0, 30);
}