// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å exec_sql
import { supabase } from '@/integrations/supabase/client';
import { executeAlternativeSQL, checkSupabaseRPCCapabilities } from '@/lib/sql-alternative';

export async function testSupabaseConnection() {
  try {
    console.log('üîç Testing Supabase connection...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ supabase –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    console.log('‚úÖ Supabase client imported:', !!supabase);
    console.log('üîç Supabase client keys:', Object.keys(supabase));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ rpc —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('‚úÖ supabase.rpc exists:', typeof supabase.rpc);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const { data: connectionTest, error: connectionError } = await supabase
      .from('admin_users')
      .select('count')
      .limit(1);
    
    console.log('‚úÖ Basic connection test:', { data: connectionTest, error: connectionError });
    
    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RPC –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    console.log('üîç Checking RPC capabilities...');
    const rpcCapabilities = await checkSupabaseRPCCapabilities();
    console.log('üìä RPC Capabilities:', rpcCapabilities);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å exec_sql –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîç Testing exec_sql function directly...');
    
    try {
      const { data, error } = await supabase.rpc('exec_sql', { 
        query: 'SELECT 1 as test_value;' 
      });
      console.log('‚úÖ Direct exec_sql result:', { data, error });
      
      if (error) {
        // –ï—Å–ª–∏ exec_sql –µ—Å—Ç—å –Ω–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É
        return { 
          success: false, 
          error: error,
          rpcCapabilities,
          message: `exec_sql —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É: ${error.message}` 
        };
      } else {
        // –ï—Å–ª–∏ exec_sql —Ä–∞–±–æ—Ç–∞–µ—Ç
        return { 
          success: true, 
          data, 
          rpcCapabilities,
          message: 'exec_sql —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!' 
        };
      }
    } catch (rpcError: any) {
      console.error('‚ùå exec_sql error:', rpcError);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
      console.log('üîÑ Trying alternative SQL execution...');
      const altResult = await executeAlternativeSQL('SELECT 1 as test_value');
      
      return { 
        success: false, 
        error: rpcError,
        rpcCapabilities,
        alternativeResult: altResult,
        message: `exec_sql –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${rpcError.message}. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${altResult.success ? '—Ä–∞–±–æ—Ç–∞–µ—Ç' : altResult.error}` 
      };
    }
    
  } catch (generalError: any) {
    console.error('‚ùå General error:', generalError);
    return { success: false, error: generalError, message: `–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${generalError.message}` };
  }
}

export async function testAlternativeQuery() {
  try {
    console.log('üîç Testing alternative query methods...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const { data, error } = await supabase
      .from('admin_users')
      .select('*')
      .limit(1);
      
    console.log('‚úÖ Standard query works:', { data, error });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ RPC —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try {
      const { data: rpcData, error: rpcError } = await supabase.rpc('test_function');
      console.log('üîç Other RPC test:', { data: rpcData, error: rpcError });
    } catch (e) {
      console.log('‚ÑπÔ∏è No test_function available (expected)');
    }
    
    return { success: true, data, error };
  } catch (e) {
    console.error('‚ùå Alternative query error:', e);
    return { success: false, error: e };
  }
}