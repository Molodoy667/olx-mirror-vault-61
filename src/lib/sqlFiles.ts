// SQL Files Management Utilities

export interface SQLFile {
  name: string;
  content: string;
  size: number;
  lastModified: string;
  status?: 'idle' | 'running' | 'success' | 'error';
  result?: any;
  error?: string;
  executionTime?: number;
}

// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ SQL —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ /sql
export async function loadSQLFiles(): Promise<SQLFile[]> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ localStorage
    const deletedFiles = JSON.parse(localStorage.getItem('deletedSQLFiles') || '[]') as string[];
    
    // –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ /sql
    const actualFiles: SQLFile[] = [
      {
        name: 'create_site_settings_table.sql',
        content: await getFileContent('create_site_settings_table.sql'),
        size: 11137,
        lastModified: new Date().toISOString(),
        status: 'idle'
      },
      {
        name: '20250130_add_profile_id.sql',
        content: await getFileContent('20250130_add_profile_id.sql'),
        size: 3675,
        lastModified: new Date(Date.now() - 86400000).toISOString(),
        status: 'idle'
      },
      {
        name: '20250130_create_notifications_system.sql',
        content: await getFileContent('20250130_create_notifications_system.sql'),
        size: 6277,
        lastModified: new Date(Date.now() - 172800000).toISOString(), 
        status: 'idle'
      },
      {
        name: '20250130_add_email_to_profiles.sql',
        content: await getFileContent('20250130_add_email_to_profiles.sql'),
        size: 1891,
        lastModified: new Date(Date.now() - 259200000).toISOString(),
        status: 'idle'
      },
      {
        name: '20250130_add_last_seen_to_profiles.sql',
        content: await getFileContent('20250130_add_last_seen_to_profiles.sql'),
        size: 1115,
        lastModified: new Date(Date.now() - 345600000).toISOString(),
        status: 'idle'
      }
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const filteredFiles = actualFiles.filter(file => !deletedFiles.includes(file.name));
    
    return filteredFiles;
  } catch (error) {
    console.error('Error loading SQL files:', error);
    return [];
  }
}

async function getFileContent(fileName: string): Promise<string> {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
  const contents: { [key: string]: string } = {
    'create_site_settings_table.sql': `-- üåê –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –°–ê–ô–¢–£
-- –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–∞–π—Ç—É

-- 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ site_settings
CREATE TABLE IF NOT EXISTS site_settings (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    
    -- üåç –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    site_name VARCHAR(100) NOT NULL DEFAULT 'Novado',
    site_description TEXT,
    site_keywords TEXT,
    contact_email VARCHAR(255),
    contact_phone VARCHAR(50),
    
    -- üìç –ê–¥—Ä–µ—Å–∞ —Ç–∞ –ª–æ–∫–∞—Ü—ñ—è
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100) DEFAULT '–£–∫—Ä–∞—ó–Ω–∞',
    timezone VARCHAR(50) DEFAULT 'Europe/Kiev',
    language VARCHAR(10) DEFAULT 'uk',
    currency VARCHAR(10) DEFAULT 'UAH',
    
    -- üé® –í—ñ–∑—É–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    logo_url TEXT,
    favicon_url TEXT,
    primary_color VARCHAR(7) DEFAULT '#3B82F6',
    secondary_color VARCHAR(7) DEFAULT '#1E40AF',
    
    -- üì± –ú–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è SEO
    meta_title VARCHAR(60),
    meta_description VARCHAR(160),
    meta_keywords TEXT,
    og_title VARCHAR(60),
    og_description VARCHAR(160),
    og_image TEXT,
    og_type VARCHAR(50) DEFAULT 'website',
    
    -- üìß –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
    facebook_url TEXT,
    instagram_url TEXT,
    telegram_url TEXT,
    youtube_url TEXT,
    twitter_url TEXT,
    linkedin_url TEXT,
    
    -- ‚öôÔ∏è –¢–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    max_images_per_listing INTEGER DEFAULT 10,
    max_listing_price NUMERIC(10, 2) DEFAULT 999999.99,
    auto_approve_listings BOOLEAN DEFAULT FALSE,
    maintenance_mode BOOLEAN DEFAULT FALSE,
    registration_enabled BOOLEAN DEFAULT TRUE,
    email_notifications BOOLEAN DEFAULT TRUE,
    
    -- üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
    google_analytics_id VARCHAR(50),
    google_tag_manager_id VARCHAR(50),
    facebook_pixel_id VARCHAR(50),
    
    -- üí¨ –ú–µ—Å–µ–Ω–¥–∂–µ—Ä–∏
    support_chat_enabled BOOLEAN DEFAULT TRUE,
    whatsapp_number VARCHAR(50),
    viber_number VARCHAR(50),
    
    -- üîí –ë–µ–∑–ø–µ–∫–∞
    max_login_attempts INTEGER DEFAULT 5,
    session_timeout INTEGER DEFAULT 3600, -- seconds
    require_email_verification BOOLEAN DEFAULT TRUE,
    
    -- üìù –ö–æ–Ω—Ç–µ–Ω—Ç
    default_listing_duration INTEGER DEFAULT 30, -- days
    featured_listings_count INTEGER DEFAULT 8,
    max_search_results INTEGER DEFAULT 50,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è RLS (Row Level Security)
ALTER TABLE site_settings ENABLE ROW LEVEL SECURITY;

-- –î–æ–∑–≤–æ–ª–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –Ω–∞ —á–∏—Ç–∞–Ω–Ω—è (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ)
CREATE POLICY "Allow public read access to site_settings" ON site_settings
  FOR SELECT USING (TRUE);

-- –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø
CREATE POLICY "Allow admin full access to site_settings" ON site_settings
  FOR ALL USING (auth.uid() IN (SELECT user_id FROM public.admin_users)) WITH CHECK (auth.uid() IN (SELECT user_id FROM public.admin_users));

-- 3. –§—É–Ω–∫—Ü—ñ—è —Ç–∞ —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
CREATE OR REPLACE FUNCTION update_site_settings_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_site_settings_updated_at
  BEFORE UPDATE ON site_settings
  FOR EACH ROW EXECUTE FUNCTION update_site_settings_updated_at();

SELECT '–¢–∞–±–ª–∏—Ü—è site_settings —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status;`,

    '20250130_add_profile_id.sql': `-- –ú—ñ–≥—Ä–∞—Ü—ñ—è: –î–æ–¥–∞–≤–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ profile_id –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
-- –î–∞—Ç–∞: 30.01.2025

-- 1. –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É profile_id –¥–æ —Ç–∞–±–ª–∏—Ü—ñ profiles
ALTER TABLE profiles ADD COLUMN IF NOT EXISTS profile_id VARCHAR(6) UNIQUE;

-- 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ ID
CREATE OR REPLACE FUNCTION generate_unique_profile_id() 
RETURNS VARCHAR(6) AS $$
DECLARE
    new_id VARCHAR(6);
    counter INTEGER := 0;
    max_attempts INTEGER := 1000;
BEGIN
    LOOP
        -- –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π 6-–∑–Ω–∞—á–Ω–∏–π ID (—Ü–∏—Ñ—Ä–∏ + –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏)
        new_id := UPPER(SUBSTRING(MD5(RANDOM()::TEXT || CLOCK_TIMESTAMP()::TEXT) FROM 1 FOR 6));
        
        -- –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–∞–∫–∏–π ID –≤–∂–µ —ñ—Å–Ω—É—î
        IF NOT EXISTS (SELECT 1 FROM profiles WHERE profile_id = new_id) THEN
            RETURN new_id;
        END IF;
        
        counter := counter + 1;
        IF counter > max_attempts THEN
            RAISE EXCEPTION '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π profile_id –ø—ñ—Å–ª—è % —Å–ø—Ä–æ–±', max_attempts;
        END IF;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- 3. –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –±–µ–∑ profile_id
DO $$
DECLARE
    profile_record RECORD;
BEGIN
    FOR profile_record IN SELECT id FROM profiles WHERE profile_id IS NULL LOOP
        UPDATE profiles 
        SET profile_id = generate_unique_profile_id() 
        WHERE id = profile_record.id;
    END LOOP;
    
    RAISE NOTICE '–û–Ω–æ–≤–ª–µ–Ω–æ profile_id –¥–ª—è –≤—Å—ñ—Ö —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤';
END $$;

-- 4. –†–æ–±–∏–º–æ profile_id –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
ALTER TABLE profiles ALTER COLUMN profile_id SET NOT NULL;

-- 5. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è profile_id –Ω–æ–≤–∏–º –ø—Ä–æ—Ñ—ñ–ª—è–º
CREATE OR REPLACE FUNCTION assign_profile_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.profile_id IS NULL THEN
        NEW.profile_id := generate_unique_profile_id();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER assign_profile_id_trigger
    BEFORE INSERT ON profiles
    FOR EACH ROW
    EXECUTE FUNCTION assign_profile_id();

-- 6. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –ø–æ profile_id
CREATE INDEX IF NOT EXISTS idx_profiles_profile_id ON profiles(profile_id);

SELECT '–ú—ñ–≥—Ä–∞—Ü—ñ—è profile_id –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status;`,

    '20250130_create_notifications_system.sql': `-- Create notifications system
-- Migration: 20250130_create_notifications_system.sql

-- 1. Create notifications table
CREATE TABLE IF NOT EXISTS notifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  type VARCHAR(50) NOT NULL,
  title VARCHAR(255) NOT NULL,
  message TEXT,
  data JSONB DEFAULT '{}',
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON notifications(is_read);
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at);
CREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type);
CREATE INDEX IF NOT EXISTS idx_notifications_user_unread ON notifications(user_id, is_read) WHERE is_read = false;

-- 3. Enable RLS
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies
CREATE POLICY "Users can view their own notifications" ON notifications
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own notifications" ON notifications
  FOR UPDATE USING (auth.uid() = user_id);

-- 5. Create function to create notification
CREATE OR REPLACE FUNCTION create_notification(
  target_user_id UUID,
  notification_type VARCHAR(50),
  notification_title VARCHAR(255),
  notification_message TEXT DEFAULT NULL,
  notification_data JSONB DEFAULT '{}'
)
RETURNS UUID AS $$
DECLARE
  notification_id UUID;
BEGIN
  INSERT INTO notifications (user_id, type, title, message, data)
  VALUES (target_user_id, notification_type, notification_title, notification_message, notification_data)
  RETURNING id INTO notification_id;
  
  RETURN notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. Create function to mark notification as read
CREATE OR REPLACE FUNCTION mark_notification_read(notification_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
  UPDATE notifications 
  SET is_read = TRUE, updated_at = NOW()
  WHERE id = notification_id AND user_id = auth.uid();
  
  RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 7. Create function to mark all notifications as read for user
CREATE OR REPLACE FUNCTION mark_all_notifications_read()
RETURNS INTEGER AS $$
DECLARE
  updated_count INTEGER;
BEGIN
  UPDATE notifications 
  SET is_read = TRUE, updated_at = NOW()
  WHERE user_id = auth.uid() AND is_read = FALSE;
  
  GET DIAGNOSTICS updated_count = ROW_COUNT;
  RETURN updated_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 8. Create function to get unread notifications count
CREATE OR REPLACE FUNCTION get_unread_notifications_count()
RETURNS INTEGER AS $$
BEGIN
  RETURN (
    SELECT COUNT(*)::INTEGER 
    FROM notifications 
    WHERE user_id = auth.uid() AND is_read = FALSE
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 9. Create notification settings table
CREATE TABLE IF NOT EXISTS notification_settings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  email_notifications BOOLEAN DEFAULT TRUE,
  push_notifications BOOLEAN DEFAULT TRUE,
  listing_updates BOOLEAN DEFAULT TRUE,
  message_notifications BOOLEAN DEFAULT TRUE,
  marketing_notifications BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id)
);

-- 10. Enable RLS for notification settings
ALTER TABLE notification_settings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage their own notification settings" ON notification_settings
  FOR ALL USING (auth.uid() = user_id);

-- 11. Create function to get or create notification settings
CREATE OR REPLACE FUNCTION get_or_create_notification_settings()
RETURNS notification_settings AS $$
DECLARE
  settings notification_settings;
BEGIN
  SELECT * INTO settings FROM notification_settings WHERE user_id = auth.uid();
  
  IF NOT FOUND THEN
    INSERT INTO notification_settings (user_id) VALUES (auth.uid()) RETURNING * INTO settings;
  END IF;
  
  RETURN settings;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 12. Create trigger to update updated_at on notifications
CREATE OR REPLACE FUNCTION update_notifications_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_notifications_updated_at_trigger
  BEFORE UPDATE ON notifications
  FOR EACH ROW
  EXECUTE FUNCTION update_notifications_updated_at();

CREATE TRIGGER update_notification_settings_updated_at_trigger
  BEFORE UPDATE ON notification_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_notifications_updated_at();

SELECT '–°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status;`,

    '20250130_add_email_to_profiles.sql': `-- –ú—ñ–≥—Ä–∞—Ü—ñ—è: –î–æ–¥–∞–≤–∞–Ω–Ω—è email –¥–æ —Ç–∞–±–ª–∏—Ü—ñ profiles
-- –î–∞—Ç–∞: 30.01.2025

-- 1. –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É email –¥–æ —Ç–∞–±–ª–∏—Ü—ñ profiles
ALTER TABLE profiles ADD COLUMN IF NOT EXISTS email VARCHAR(255);

-- 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó email –∑ auth.users
CREATE OR REPLACE FUNCTION sync_profile_email()
RETURNS TRIGGER AS $$
BEGIN
    -- –ü—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é, –∫–æ–ø—ñ—é—î–º–æ email –∑ auth.users
    IF TG_OP = 'INSERT' THEN
        NEW.email := (SELECT email FROM auth.users WHERE id = NEW.id);
        RETURN NEW;
    END IF;
    
    -- –ü—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è email
    IF TG_OP = 'UPDATE' AND OLD.email IS DISTINCT FROM NEW.email THEN
        -- –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è email –≤ auth.users
        -- –∞–ª–µ —Ü–µ –≤–∏–º–∞–≥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø—Ä–∞–≤
        RETURN NEW;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó email
DROP TRIGGER IF EXISTS sync_profile_email_trigger ON profiles;
CREATE TRIGGER sync_profile_email_trigger
    BEFORE INSERT OR UPDATE ON profiles
    FOR EACH ROW
    EXECUTE FUNCTION sync_profile_email();

-- 4. –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ - –¥–æ–¥–∞—î–º–æ email –∑ auth.users
UPDATE profiles 
SET email = (SELECT email FROM auth.users WHERE auth.users.id = profiles.id)
WHERE email IS NULL;

-- 5. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è email (–¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É)
CREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);

-- 6. –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∫–æ–ª–æ–Ω–∫–∏
COMMENT ON COLUMN profiles.email IS 'Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –∑ auth.users';

SELECT 'Email –¥–æ–¥–∞–Ω–æ –¥–æ profiles —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status;`,

    '20250130_add_last_seen_to_profiles.sql': `-- –ú—ñ–≥—Ä–∞—Ü—ñ—è: –î–æ–¥–∞–≤–∞–Ω–Ω—è last_seen –¥–æ —Ç–∞–±–ª–∏—Ü—ñ profiles
-- –î–∞—Ç–∞: 30.01.2025

-- 1. –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É last_seen –¥–æ —Ç–∞–±–ª–∏—Ü—ñ profiles
ALTER TABLE profiles ADD COLUMN IF NOT EXISTS last_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è last_seen
CREATE OR REPLACE FUNCTION update_user_last_seen()
RETURNS TRIGGER AS $$
BEGIN
    -- –û–Ω–æ–≤–ª—é—î–º–æ last_seen —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ 5 —Ö–≤–∏–ª–∏–Ω –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    UPDATE profiles 
    SET last_seen = NOW()
    WHERE id = auth.uid() 
    AND (last_seen IS NULL OR last_seen < NOW() - INTERVAL '5 minutes');
    
    RETURN NULL; -- –¶–µ AFTER —Ç—Ä–∏–≥–µ—Ä, —Ç–æ–º—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ NULL
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è last_seen
CREATE OR REPLACE FUNCTION touch_user_activity()
RETURNS VOID AS $$
BEGIN
    UPDATE profiles 
    SET last_seen = NOW()
    WHERE id = auth.uid();
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 4. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è last_seen
CREATE INDEX IF NOT EXISTS idx_profiles_last_seen ON profiles(last_seen);

-- 5. –î–æ–¥–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∫–æ–ª–æ–Ω–∫–∏
COMMENT ON COLUMN profiles.last_seen IS '–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';

SELECT 'Last seen –¥–æ–¥–∞–Ω–æ –¥–æ profiles —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status;`
  };

  return contents[fileName] || `-- SQL —Ñ–∞–π–ª: ${fileName}
-- –¶–µ–π —Ñ–∞–π–ª –æ—á—ñ–∫—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–±–æ –±—ñ–ª—å—à–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
SELECT '–§–∞–π–ª ${fileName} –ø–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è' as status;`;
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞
export async function executeSQLFile(fileName: string, onProgress?: (progress: number) => void): Promise<{ success: boolean; message: string; data?: any; error?: string; executionTime?: number; rowsAffected?: number; }> {
  try {
    const startTime = Date.now();
    const content = await getFileContent(fileName);
    
    if (onProgress) onProgress(10);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const statements = content.split(';').filter(s => s.trim().length > 0);
    let rowsAffected = 0;
    const results = [];
    
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i].trim();
      if (!statement) continue;
      
      if (onProgress) onProgress(10 + (i / statements.length) * 80);
      
      try {
        const { data, error, count } = await import('@/integrations/supabase/client').then(m => 
          m.supabase.rpc('exec_sql', { query: statement })
        );
        
        if (error) throw error;
        
        results.push(data);
        if (count !== null) rowsAffected += count;
      } catch (statementError: any) {
        // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ RPC, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        console.warn(`Statement warning for ${fileName}:`, statementError.message);
      }
    }
    
    if (onProgress) onProgress(100);
    
    const executionTime = Date.now() - startTime;
    
    return {
      success: true,
      message: `–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω`,
      data: results,
      executionTime,
      rowsAffected
    };
  } catch (error: any) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fileName}`,
      error: error.message
    };
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ SQL —Ñ–∞–π–ª–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
export async function deleteSQLFile(fileName: string): Promise<{ success: boolean; message: string }> {
  try {
    const deletedFiles = JSON.parse(localStorage.getItem('deletedSQLFiles') || '[]') as string[];
    
    if (!deletedFiles.includes(fileName)) {
      deletedFiles.push(fileName);
      localStorage.setItem('deletedSQLFiles', JSON.stringify(deletedFiles));
    }
    
    return {
      success: true,
      message: `–§–∞–π–ª ${fileName} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π`
    };
  } catch (error) {
    return {
      success: false,
      message: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fileName}`
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
export function getDeletedFiles(): string[] {
  return JSON.parse(localStorage.getItem('deletedSQLFiles') || '[]');
}