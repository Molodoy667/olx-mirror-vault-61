import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from '@/hooks/use-toast';
import { Eye, EyeOff, Mail, Lock, User, ArrowRight, Home, AtSign, Shield, FileText } from 'lucide-react';
import { cn } from '@/lib/utils';

export default function Auth() {
  const navigate = useNavigate();
  const [isLogin, setIsLogin] = useState(true);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    login: '', // –º–æ–∂–µ –±—É—Ç–∏ email –∞–±–æ username
    password: '',
    fullName: '',
    username: ''
  });
  const [agreements, setAgreements] = useState({
    terms: false,
    privacy: false
  });
  const [errors, setErrors] = useState<{[key: string]: string}>({});

  const isValidEmail = (email: string) => /\S+@\S+\.\S+/.test(email);
  const isValidUsername = (username: string) => /^[a-zA-Z0-9_]{3,20}$/.test(username);

  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–æ–≥—ñ–Ω–∞ (email –∞–±–æ username)
    if (!formData.login) {
      newErrors.login = "–õ–æ–≥—ñ–Ω –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (!isValidEmail(formData.login) && !isValidUsername(formData.login)) {
      newErrors.login = "–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω–∏–π email –∞–±–æ username (3-20 —Å–∏–º–≤–æ–ª—ñ–≤, a-z, 0-9, _)";
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
    if (!formData.password) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
    } else if (formData.password.length < 8) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤";
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ–ª–∏–∫—ñ —Ç–∞ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏";
    }

    if (!isLogin) {
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
      if (!formData.fullName) {
        newErrors.fullName = "–ü–æ–≤–Ω–µ —ñ–º'—è –æ–±–æ–≤'—è–∑–∫–æ–≤–µ";
      } else if (formData.fullName.length < 2) {
        newErrors.fullName = "–ü–æ–≤–Ω–µ —ñ–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏";
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è username
      if (!formData.username) {
        newErrors.username = "Username –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π";
      } else if (!isValidUsername(formData.username)) {
        newErrors.username = "Username: 3-20 —Å–∏–º–≤–æ–ª—ñ–≤, –ª–∏—à–µ a-z, 0-9, _";
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–≥–æ–¥–∏ –∑ —É–º–æ–≤–∞–º–∏
      if (!agreements.terms) {
        newErrors.terms = "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –£–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è";
      }
      if (!agreements.privacy) {
        newErrors.privacy = "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ";
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);

    try {
      if (isLogin) {
        // –°–ø—Ä–æ–±—É—î–º–æ —É–≤—ñ–π—Ç–∏ —è–∫ email, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ - —è–∫ username
        let loginData;
        
        if (isValidEmail(formData.login)) {
          // –õ–æ–≥—ñ–Ω —è–∫ email
          loginData = await supabase.auth.signInWithPassword({
            email: formData.login,
            password: formData.password,
          });
        } else {
          // –õ–æ–≥—ñ–Ω —è–∫ username - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ email –ø–æ username
          const { data: profile } = await supabase
            .from('profiles')
            .select('email')
            .eq('username', formData.login)
            .single();
          
          if (!profile || !profile.email) {
            throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º username –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
          }
          
          // –õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ email –∑–Ω–∞–π–¥–µ–Ω–∏–π –ø–æ username
          loginData = await supabase.auth.signInWithPassword({
            email: profile.email,
            password: formData.password,
          });
        }

        if (loginData.error) throw loginData.error;
        
        if (loginData.data.user) {
          // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –≤ localStorage —Ç–∞ cookies
          localStorage.setItem('novado_session', JSON.stringify(loginData.data.session));
          document.cookie = `novado_user=${loginData.data.user.id}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=strict`;
          
          toast({
            title: "–£—Å–ø—ñ—à–Ω–æ!",
            description: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥!",
          });
          navigate('/');
        }
      } else {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ username
        const { data: existingUser } = await supabase
          .from('profiles')
          .select('username')
          .eq('username', formData.username)
          .single();

        if (existingUser) {
          setErrors({ username: '–¶–µ–π username –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π' });
          setLoading(false);
          return;
        }

        // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ email (login –ø–æ–ª–µ –º–∞—î –±—É—Ç–∏ email –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó)
        if (!isValidEmail(formData.login)) {
          setErrors({ login: '–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π email' });
          setLoading(false);
          return;
        }

        const { data, error } = await supabase.auth.signUp({
          email: formData.login,
          password: formData.password,
          options: {
            emailRedirectTo: `${window.location.origin}/welcome`,
            data: {
              full_name: formData.fullName,
              username: formData.username
            }
          }
        });

        if (error) throw error;

        if (data.user) {
          // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
          const { error: profileError } = await supabase
            .from('profiles')
            .insert({
              id: data.user.id,
              full_name: formData.fullName,
              username: formData.username,
              email: formData.login,
            });

          if (profileError) {
            console.error('Profile creation error:', profileError);
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
          const loginData = await supabase.auth.signInWithPassword({
            email: formData.login,
            password: formData.password,
          });
          
          if (!loginData.error && loginData.data.user) {
            // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
            localStorage.setItem('novado_session', JSON.stringify(loginData.data.session));
            document.cookie = `novado_user=${loginData.data.user.id}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=strict`;
            
            toast({
              title: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! üéâ",
              description: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Novado!",
            });
            
            // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ welcome —Å—Ç–æ—Ä—ñ–Ω–∫—É
            navigate('/welcome');
          }
        }
      }
    } catch (error: any) {
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value });
    if (errors[field]) {
      setErrors({ ...errors, [field]: '' });
    }
  };

  const handleAgreementChange = (field: 'terms' | 'privacy', checked: boolean) => {
    setAgreements({ ...agreements, [field]: checked });
    if (errors[field]) {
      setErrors({ ...errors, [field]: '' });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20 flex items-center justify-center px-4 py-8">
      <div className="w-full max-w-md animate-fade-in">
        <Card className="backdrop-blur-sm bg-card/95 shadow-xl border-border/50">
          <CardHeader className="space-y-1 text-center pb-8">
            <div className="flex items-center justify-center mb-4">
              <div className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
                Novado
              </div>
            </div>
            <CardTitle className="text-2xl font-semibold">
              {isLogin ? '–í—ñ—Ç–∞—î–º–æ –∑–Ω–æ–≤—É!' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç'}
            </CardTitle>
            <CardDescription className="text-muted-foreground">
              {isLogin 
                ? '–£–≤—ñ–π–¥—ñ—Ç—å, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ Novado' 
                : '–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ Novado'
              }
            </CardDescription>
          </CardHeader>

          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              {/* –õ–æ–≥—ñ–Ω (email –∞–±–æ username) */}
              <div className="space-y-2">
                <Label htmlFor="login" className="text-sm font-medium">
                  {isLogin ? 'Email –∞–±–æ Username' : 'Email'}
                </Label>
                <div className="relative">
                  {isLogin ? (
                    <AtSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  ) : (
                    <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  )}
                  <Input
                    id="login"
                    type="text"
                    placeholder={isLogin ? "email@example.com –∞–±–æ username" : "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à email"}
                    value={formData.login}
                    onChange={(e) => handleInputChange('login', e.target.value)}
                    className={cn(
                      "pl-10",
                      errors.login && "border-red-500 focus-visible:ring-red-500"
                    )}
                  />
                </div>
                {errors.login && (
                  <p className="text-sm text-red-500">{errors.login}</p>
                )}
              </div>

              {/* –ü–æ–ª—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó */}
              {!isLogin && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="fullName" className="text-sm font-medium">
                      –ü–æ–≤–Ω–µ —ñ–º'—è
                    </Label>
                    <div className="relative">
                      <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="fullName"
                        type="text"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è"
                        value={formData.fullName}
                        onChange={(e) => handleInputChange('fullName', e.target.value)}
                        className={cn(
                          "pl-10",
                          errors.fullName && "border-red-500 focus-visible:ring-red-500"
                        )}
                      />
                    </div>
                    {errors.fullName && (
                      <p className="text-sm text-red-500">{errors.fullName}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="username" className="text-sm font-medium">
                      Username
                    </Label>
                    <div className="relative">
                      <AtSign className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="username"
                        type="text"
                        placeholder="@username"
                        value={formData.username}
                        onChange={(e) => {
                          let value = e.target.value;
                          if (value && !value.startsWith('@')) {
                            value = '@' + value;
                          }
                          handleInputChange('username', value.slice(1)); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–µ–∑ @
                        }}
                        className={cn(
                          "pl-10",
                          errors.username && "border-red-500 focus-visible:ring-red-500"
                        )}
                      />
                    </div>
                    {errors.username && (
                      <p className="text-sm text-red-500">{errors.username}</p>
                    )}
                  </div>
                </div>
              )}

              {/* –ü–∞—Ä–æ–ª—å */}
              <div className="space-y-2">
                <Label htmlFor="password" className="text-sm font-medium">
                  –ü–∞—Ä–æ–ª—å
                </Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="password"
                    type={showPassword ? 'text' : 'password'}
                    placeholder={isLogin ? "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å" : "–ú—ñ–Ω. 8 —Å–∏–º–≤–æ–ª—ñ–≤, –≤–µ–ª–∏–∫—ñ —Ç–∞ –º–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏"}
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    className={cn(
                      "pl-10 pr-10",
                      errors.password && "border-red-500 focus-visible:ring-red-500"
                    )}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-3 text-muted-foreground hover:text-foreground transition-colors"
                  >
                    {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                </div>
                {errors.password && (
                  <p className="text-sm text-red-500">{errors.password}</p>
                )}
              </div>

              {/* –ì–∞–ª–æ—á–∫–∏ –∑–≥–æ–¥–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó */}
              {!isLogin && (
                <div className="space-y-3 pt-2">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="terms"
                      checked={agreements.terms}
                      onCheckedChange={(checked) => handleAgreementChange('terms', checked as boolean)}
                      className={errors.terms ? "border-red-500" : ""}
                    />
                    <Label htmlFor="terms" className="text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                      –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—è –∑{' '}
                      <Link to="/terms" className="text-primary hover:underline font-medium inline-flex items-center gap-1">
                        <Shield className="w-3 h-3" />
                        –£–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                      </Link>
                    </Label>
                  </div>
                  {errors.terms && (
                    <p className="text-sm text-red-500 ml-6">{errors.terms}</p>
                  )}

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="privacy"
                      checked={agreements.privacy}
                      onCheckedChange={(checked) => handleAgreementChange('privacy', checked as boolean)}
                      className={errors.privacy ? "border-red-500" : ""}
                    />
                    <Label htmlFor="privacy" className="text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                      –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—è –∑{' '}
                      <Link to="/privacy" className="text-primary hover:underline font-medium inline-flex items-center gap-1">
                        <FileText className="w-3 h-3" />
                        –ü–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
                      </Link>
                    </Label>
                  </div>
                  {errors.privacy && (
                    <p className="text-sm text-red-500 ml-6">{errors.privacy}</p>
                  )}
                </div>
              )}

              {/* –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É */}
              {isLogin && (
                <div className="flex justify-end">
                  <Link
                    to="/forgot-password"
                    className="text-sm text-primary hover:underline font-medium"
                  >
                    –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?
                  </Link>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ */}
              <Button
                type="submit"
                className="w-full h-11 font-medium"
                disabled={loading}
              >
                {loading ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin" />
                    –ó–∞—á–µ–∫–∞–π—Ç–µ...
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    {isLogin ? '–£–≤—ñ–π—Ç–∏' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
                    <ArrowRight className="w-4 h-4" />
                  </div>
                )}
              </Button>

              {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É */}
              <Button
                type="button"
                variant="outline"
                className="w-full h-11 font-medium"
                onClick={() => navigate('/')}
              >
                <Home className="w-4 h-4 mr-2" />
                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
              </Button>
            </form>

            <div className="mt-6 pt-6 border-t border-border/50">
              <div className="text-center">
                <p className="text-sm text-muted-foreground">
                  {isLogin ? '–ù–µ–º–∞—î –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É?' : '–í–∂–µ —î –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å?'}
                </p>
                <button
                  type="button"
                  onClick={() => {
                    setIsLogin(!isLogin);
                    setErrors({});
                    setFormData({ login: '', password: '', fullName: '', username: '' });
                    setAgreements({ terms: false, privacy: false });
                  }}
                  className="mt-2 text-primary hover:underline font-semibold inline-flex items-center gap-1"
                >
                  {isLogin ? '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è' : '–£–≤—ñ–π—Ç–∏'}
                  <ArrowRight className="w-3 h-3" />
                </button>
              </div>
            </div>

          </CardContent>
        </Card>
      </div>
    </div>
  );
}