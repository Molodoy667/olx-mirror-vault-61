name: 🧪 Test Build (Quick)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build to test'
        required: true
        default: 'pwa'
        type: choice
        options:
          - pwa
          - android
          - both

jobs:
  test-pwa:
    if: ${{ github.event.inputs.build_type == 'pwa' || github.event.inputs.build_type == 'both' }}
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: 🏗️ Build PWA
      run: npm run build
      
    - name: ✅ PWA Build Success
      run: |
        echo "✅ PWA build completed successfully!"
        echo "📁 Build size:"
        du -sh dist/
        echo "📋 Build contents:"
        ls -la dist/
        
    - name: 📤 Upload PWA build
      uses: actions/upload-artifact@v4
      with:
        name: test-pwa-build
        path: dist/

  test-android-setup:
    if: ${{ github.event.inputs.build_type == 'android' || github.event.inputs.build_type == 'both' }}
    needs: test-pwa
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📥 Download PWA build
      if: ${{ github.event.inputs.build_type == 'both' }}
      uses: actions/download-artifact@v4
      with:
        name: test-pwa-build
        path: dist/
        
    - name: 🏗️ Build PWA (if android only)
      if: ${{ github.event.inputs.build_type == 'android' }}
      run: |
        npm install --legacy-peer-deps
        npm run build
        
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 🔧 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.0.2'
        
    - name: 📋 Install Capacitor dependencies
      run: npm install --legacy-peer-deps
      
    - name: ⚙️ Test Capacitor init
      run: |
        echo "🔧 Testing Capacitor initialization..."
        npx cap init "Novado" "com.novado.app" --web-dir=dist
        echo "✅ Capacitor init successful"
        
    - name: 📱 Test Android platform add
      run: |
        echo "📱 Testing Android platform add..."
        npx cap add android
        echo "✅ Android platform added"
        
    - name: 🔄 Test Android sync
      run: |
        echo "🔄 Testing Android sync..."
        npx cap sync android
        echo "✅ Android sync successful"
        
    - name: 🔍 Android project diagnostics
      run: |
        echo "📁 Android project structure:"
        ls -la android/
        echo ""
        echo "📱 App directory:"
        ls -la android/app/ || echo "❌ app directory not found"
        echo ""
        echo "🔧 Looking for gradle files:"
        find android/ -name "*gradle*" -type f | head -10
        echo ""
        echo "🔧 Checking for gradlew:"
        ls -la android/gradlew* || echo "❌ gradlew not found"
        
    - name: 🔧 Test Gradle wrapper creation
      run: |
        cd android
        if [ ! -f "./gradlew" ]; then
          echo "🔧 Creating Gradle Wrapper..."
          
          # Create basic build.gradle
          cat > build.gradle << 'EOF'
buildscript {
    ext {
        compileSdkVersion = 34
        targetSdkVersion = 34
        minSdkVersion = 22
        cordovaAndroidVersion = '10.1.1'
        kotlin_version = '1.9.10'
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply from: "capacitor.settings.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOF
          
          # Create gradle.properties
          cat > gradle.properties << 'EOF'
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
EOF
          
          # Create settings.gradle
          cat > settings.gradle << 'EOF'
include ':app'
include ':capacitor-cordova-android-plugins'
project(':capacitor-cordova-android-plugins').projectDir = new File('./capacitor-cordova-android-plugins/')
apply from: 'capacitor.settings.gradle'
EOF
          
          # Initialize gradle wrapper
          gradle wrapper --gradle-version 8.0.2 --distribution-type all
          
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            echo "✅ Gradle Wrapper created successfully!"
          else
            echo "❌ Failed to create Gradle Wrapper"
            exit 1
          fi
        else
          echo "✅ Gradle Wrapper already exists"
        fi
        
    - name: 🚀 Test APK build (quick)
      run: |
        cd android
        echo "🚀 Testing APK build..."
        ./gradlew assembleDebug --stacktrace
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ APK built successfully!"
          ls -la app/build/outputs/apk/debug/
          echo "📱 APK size:"
          du -sh app/build/outputs/apk/debug/app-debug.apk
        else
          echo "❌ APK not found"
          find app/build -name "*.apk" -type f || echo "No APK files found"
          exit 1
        fi
        
    - name: 📤 Upload test APK
      uses: actions/upload-artifact@v4
      with:
        name: test-android-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk

  summary:
    needs: [test-pwa, test-android-setup]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Test Summary
      run: |
        echo "🧪 TEST BUILD SUMMARY"
        echo "===================="
        echo "PWA Build: ${{ needs.test-pwa.result }}"
        echo "Android Setup: ${{ needs.test-android-setup.result }}"
        echo ""
        if [[ "${{ needs.test-pwa.result }}" == "success" && "${{ needs.test-android-setup.result }}" == "success" ]]; then
          echo "✅ ALL TESTS PASSED - Ready for production build!"
        else
          echo "❌ Some tests failed - check logs above"
        fi