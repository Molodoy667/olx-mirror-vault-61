name: üì± Android APK (Robust)

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'true'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: üìã Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: üèóÔ∏è Build PWA
      run: npm run build
      
    - name: ‚òï Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: ü§ñ Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: üîß Install Android build tools
      run: |
        echo "üì± Installing Android build tools..."
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        
    - name: üì± Accept SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
    - name: üîß Setup Gradle 8.2
      run: |
        # Install Gradle 8.2 (minimum required)
        wget -q https://services.gradle.org/distributions/gradle-8.2-bin.zip
        unzip -q gradle-8.2-bin.zip
        export PATH=$PWD/gradle-8.2/bin:$PATH
        echo "$PWD/gradle-8.2/bin" >> $GITHUB_PATH
        gradle --version
        
    - name: ‚öôÔ∏è Create Capacitor Android project
      run: |
        echo "üì± Creating Capacitor Android project..."
        npx cap add android
        npx cap sync android
        
        echo "üìÅ Checking created structure:"
        ls -la android/
        
    - name: üîß Fix Android project configuration
      run: |
        cd android
        
        # Create proper build.gradle
        cat > build.gradle << 'EOF'
buildscript {
    ext {
        compileSdkVersion = 34
        targetSdkVersion = 34
        minSdkVersion = 22
        androidxActivityVersion = '1.8.0'
        androidxAppCompatVersion = '1.6.1'
        androidxCoordinatorLayoutVersion = '1.2.0'
        androidxCoreVersion = '1.10.1'
        androidxFragmentVersion = '1.6.1'
        coreSplashScreenVersion = '1.0.1'
        androidxWebkitVersion = '1.7.0'
        junitVersion = '4.13.2'
        androidxJunitVersion = '1.1.5'
        androidxEspressoCoreVersion = '3.5.1'
        cordovaAndroidVersion = '10.1.1'
        kotlin_version = '1.9.10'
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply from: "capacitor.settings.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOF

        # Create gradle.properties
        cat > gradle.properties << 'EOF'
org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
android.useAndroidX=true
android.enableJetifier=true
android.nonTransitiveRClass=false
android.defaults.buildfeatures.buildconfig=true
android.nonFinalResIds=false
EOF

        # Create settings.gradle
        cat > settings.gradle << 'EOF'
include ':app'
include ':capacitor-cordova-android-plugins'
project(':capacitor-cordova-android-plugins').projectDir = new File('./capacitor-cordova-android-plugins/')

apply from: 'capacitor.settings.gradle'
EOF

        # Create gradle wrapper with correct version
        gradle wrapper --gradle-version 8.2 --distribution-type all
        chmod +x gradlew
        
        # Verify gradle wrapper version
        echo "üîç Checking gradle wrapper version:"
        cat gradle/wrapper/gradle-wrapper.properties | grep distributionUrl
        
        echo "‚úÖ Android project configured"
        
    - name: üîç Diagnose Android project
      run: |
        cd android
        
        echo "üìÅ Project structure:"
        find . -name "*.gradle" -o -name "gradlew*" | head -20
        
        echo "üì± App module:"
        ls -la app/ || echo "‚ùå app directory missing"
        
        echo "üîß Gradle wrapper test:"
        ./gradlew --version || echo "‚ùå gradlew test failed"
        
        echo "üìã Gradle tasks:"
        ./gradlew tasks --group="build" | head -10 || echo "‚ùå tasks failed"
        
    - name: üîß Fix common Android issues
      run: |
        cd android
        
        # Fix app/build.gradle if needed
        if [ -f "app/build.gradle" ]; then
          echo "üîß Checking app/build.gradle..."
          
          # Ensure proper Android configuration
          if ! grep -q "compileSdk 34" app/build.gradle; then
            echo "üîß Fixing compileSdk version..."
            sed -i 's/compileSdk [0-9]*/compileSdk 34/g' app/build.gradle
          fi
          
          if ! grep -q "targetSdk 34" app/build.gradle; then
            echo "üîß Fixing targetSdk version..."
            sed -i 's/targetSdk [0-9]*/targetSdk 34/g' app/build.gradle
          fi
          
          echo "‚úÖ app/build.gradle checked"
        fi
        
    - name: üèóÔ∏è Build APK with detailed logs
      run: |
        cd android
        
        echo "üöÄ Building APK with detailed logging..."
        ./gradlew clean
        ./gradlew assembleDebug --stacktrace --info --debug
        
    - name: üìã Check build results
      run: |
        cd android
        
        echo "üìÅ Checking build outputs:"
        find . -name "*.apk" -type f | head -10
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "‚úÖ APK built successfully!"
          ls -la app/build/outputs/apk/debug/
          du -sh app/build/outputs/apk/debug/app-debug.apk
          
          # Copy APK to root for release
          cp app/build/outputs/apk/debug/app-debug.apk ../novado-android.apk
        else
          echo "‚ùå APK not found!"
          echo "üìÅ Build directory contents:"
          find app/build -type f | head -20
          exit 1
        fi
        
    - name: üìã Get version
      id: version
      run: echo "VERSION=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
      
    - name: üöÄ Create Release
      if: hashFiles('novado-android.apk') != ''
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: üì± Novado v${{ steps.version.outputs.VERSION }}
        body: |
          üì± **Novado Android APK –≥–æ—Ç–æ–≤–∏–π!**
          
          üìÖ –í–µ—Ä—Å—ñ—è: ${{ steps.version.outputs.VERSION }}
          üì± –ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏: **Novado**
          üèóÔ∏è –ú–µ—Ç–æ–¥ –∑–±—ñ—Ä–∫–∏: Robust build
          
          ### üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:
          1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ APK –Ω–∏–∂—á–µ
          2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å "–ù–µ–≤—ñ–¥–æ–º—ñ –¥–∂–µ—Ä–µ–ª–∞" –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Android
          3. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å APK —Ñ–∞–π–ª
          4. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ **Novado**
          
          ### ‚ú® –§—É–Ω–∫—Ü—ñ—ó:
          - üé¨ Splash screen: "–ë–µ–∑–ª—ñ—á –æ–≥–æ–ª–æ—à–µ–Ω—å —á–µ–∫–∞—é—Ç—å –Ω–∞ —Ç–µ–±–µ"
          - üì± –ö—Ä–∞—Å–∏–≤–∞ —ñ–∫–æ–Ω–∫–∞ –∑ –±—É–∫–≤–æ—é N
          - üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –±—Ä–µ–Ω–¥–∏–Ω–≥ —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
          - üîÑ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ PWA —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
          - üì± –ü–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –≤–µ–±-–≤–µ—Ä—Å—ñ—ó
          - üåê –û—Ñ–ª–∞–π–Ω –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–µ—Ä–µ–∑ Service Worker
          
          ### üîÑ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è:
          - –î–æ–¥–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
          - –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑'—è–≤–ª—è—é—Ç—å—Å—è –±–µ–∑ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK
          - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Supabase –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
          
        files: novado-android.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}