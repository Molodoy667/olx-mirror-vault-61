-- üîß –°–¢–í–û–†–ï–ù–ù–Ø –§–£–ù–ö–¶–Ü–á EXEC_SQL
-- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ–≤—ñ–ª—å–Ω–∏—Ö SQL –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ Supabase RPC

-- 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó exec_sql
CREATE OR REPLACE FUNCTION exec_sql(query TEXT)
RETURNS TABLE(
    result JSONB,
    rows_affected INTEGER,
    execution_time_ms INTEGER,
    query_type TEXT
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    start_time TIMESTAMP;
    end_time TIMESTAMP;
    execution_ms INTEGER;
    query_upper TEXT;
    affected_rows INTEGER := 0;
    result_data JSONB := '[]'::JSONB;
    single_result JSONB;
    rec RECORD;
BEGIN
    -- –ó–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É
    start_time := clock_timestamp();
    
    -- –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
    query_upper := UPPER(TRIM(query));
    
    -- –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
    IF auth.uid() IN (SELECT user_id FROM public.admin_users) THEN
        RAISE NOTICE 'Executing SQL: %', LEFT(query, 100);
    END IF;
    
    -- –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
    IF query_upper LIKE 'SELECT%' THEN
        -- SELECT –∑–∞–ø–∏—Ç–∏ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        FOR rec IN EXECUTE query LOOP
            single_result := to_jsonb(rec);
            result_data := result_data || single_result;
            affected_rows := affected_rows + 1;
        END LOOP;
        
        -- –ó–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        end_time := clock_timestamp();
        execution_ms := EXTRACT(MILLISECONDS FROM (end_time - start_time))::INTEGER;
        
        RETURN QUERY SELECT 
            result_data,
            affected_rows,
            execution_ms,
            'SELECT'::TEXT;
            
    ELSIF query_upper LIKE 'INSERT%' OR query_upper LIKE 'UPDATE%' OR query_upper LIKE 'DELETE%' THEN
        -- DML –∑–∞–ø–∏—Ç–∏ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
        EXECUTE query;
        GET DIAGNOSTICS affected_rows = ROW_COUNT;
        
        end_time := clock_timestamp();
        execution_ms := EXTRACT(MILLISECONDS FROM (end_time - start_time))::INTEGER;
        
        RETURN QUERY SELECT 
            jsonb_build_object(
                'status', 'success',
                'message', format('%s –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 
                    CASE 
                        WHEN query_upper LIKE 'INSERT%' THEN 'INSERT'
                        WHEN query_upper LIKE 'UPDATE%' THEN 'UPDATE'
                        WHEN query_upper LIKE 'DELETE%' THEN 'DELETE'
                    END),
                'rows_affected', affected_rows
            ),
            affected_rows,
            execution_ms,
            CASE 
                WHEN query_upper LIKE 'INSERT%' THEN 'INSERT'
                WHEN query_upper LIKE 'UPDATE%' THEN 'UPDATE'
                WHEN query_upper LIKE 'DELETE%' THEN 'DELETE'
            END::TEXT;
            
    ELSIF query_upper LIKE 'CREATE%' OR query_upper LIKE 'DROP%' OR query_upper LIKE 'ALTER%' THEN
        -- DDL –∑–∞–ø–∏—Ç–∏ - —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ñ –∑–º—ñ–Ω–∏
        EXECUTE query;
        
        end_time := clock_timestamp();
        execution_ms := EXTRACT(MILLISECONDS FROM (end_time - start_time))::INTEGER;
        
        RETURN QUERY SELECT 
            jsonb_build_object(
                'status', 'success',
                'message', format('%s –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 
                    CASE 
                        WHEN query_upper LIKE 'CREATE%' THEN 'CREATE'
                        WHEN query_upper LIKE 'DROP%' THEN 'DROP'
                        WHEN query_upper LIKE 'ALTER%' THEN 'ALTER'
                    END),
                'type', 'DDL'
            ),
            0,
            execution_ms,
            CASE 
                WHEN query_upper LIKE 'CREATE%' THEN 'CREATE'
                WHEN query_upper LIKE 'DROP%' THEN 'DROP'
                WHEN query_upper LIKE 'ALTER%' THEN 'ALTER'
            END::TEXT;
            
    ELSE
        -- –Ü–Ω—à—ñ –∑–∞–ø–∏—Ç–∏ (SHOW, EXPLAIN, —Ç–æ—â–æ)
        FOR rec IN EXECUTE query LOOP
            single_result := to_jsonb(rec);
            result_data := result_data || single_result;
            affected_rows := affected_rows + 1;
        END LOOP;
        
        end_time := clock_timestamp();
        execution_ms := EXTRACT(MILLISECONDS FROM (end_time - start_time))::INTEGER;
        
        RETURN QUERY SELECT 
            result_data,
            affected_rows,
            execution_ms,
            'OTHER'::TEXT;
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        -- –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
        end_time := clock_timestamp();
        execution_ms := EXTRACT(MILLISECONDS FROM (end_time - start_time))::INTEGER;
        
        RETURN QUERY SELECT 
            jsonb_build_object(
                'status', 'error',
                'error', SQLERRM,
                'sqlstate', SQLSTATE,
                'query', LEFT(query, 200),
                'hint', '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL –∑–∞–ø–∏—Ç—É'
            ),
            0,
            execution_ms,
            'ERROR'::TEXT;
END;
$$;

-- 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø—Ä–æ—â–µ–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó exec_sql (–¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
CREATE OR REPLACE FUNCTION exec_sql_simple(query TEXT)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result_data JSONB := '[]'::JSONB;
    single_result JSONB;
    rec RECORD;
    affected_rows INTEGER := 0;
BEGIN
    -- –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    IF NOT (auth.uid() IN (SELECT user_id FROM public.admin_users)) THEN
        RETURN jsonb_build_object('error', '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.');
    END IF;
    
    -- –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
    IF UPPER(TRIM(query)) LIKE 'SELECT%' THEN
        FOR rec IN EXECUTE query LOOP
            single_result := to_jsonb(rec);
            result_data := result_data || single_result;
        END LOOP;
        RETURN result_data;
    ELSE
        EXECUTE query;
        GET DIAGNOSTICS affected_rows = ROW_COUNT;
        RETURN jsonb_build_object(
            'status', 'success',
            'rows_affected', affected_rows,
            'message', '–ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        );
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'status', 'error',
            'error', SQLERRM,
            'sqlstate', SQLSTATE
        );
END;
$$;

-- 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É

-- –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
REVOKE ALL ON FUNCTION exec_sql(TEXT) FROM PUBLIC;
REVOKE ALL ON FUNCTION exec_sql_simple(TEXT) FROM PUBLIC;

-- –ù–∞–¥–∞—î–º–æ –ø—Ä–∞–≤–∞ —Ç—ñ–ª—å–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
GRANT EXECUTE ON FUNCTION exec_sql(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION exec_sql_simple(TEXT) TO authenticated;

-- 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
CREATE TABLE IF NOT EXISTS sql_execution_log (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    query_text TEXT NOT NULL,
    query_type TEXT,
    execution_time_ms INTEGER,
    rows_affected INTEGER,
    status TEXT DEFAULT 'success',
    error_message TEXT,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- RLS –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
ALTER TABLE sql_execution_log ENABLE ROW LEVEL SECURITY;

-- –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –±–∞—á–∏—Ç–∏ –ª–æ–≥–∏
CREATE POLICY "Admins can view sql execution logs" ON sql_execution_log
  FOR SELECT USING (auth.uid() IN (SELECT user_id FROM public.admin_users));

-- –í—Å—ñ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Å–≤–æ—ó –ª–æ–≥–∏
CREATE POLICY "Users can insert own sql logs" ON sql_execution_log
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- 5. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
CREATE OR REPLACE FUNCTION log_sql_execution(
    p_query TEXT,
    p_query_type TEXT,
    p_execution_time INTEGER,
    p_rows_affected INTEGER,
    p_status TEXT DEFAULT 'success',
    p_error_message TEXT DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO sql_execution_log (
        user_id,
        query_text,
        query_type,
        execution_time_ms,
        rows_affected,
        status,
        error_message,
        ip_address,
        user_agent
    ) VALUES (
        auth.uid(),
        LEFT(p_query, 1000), -- –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
        p_query_type,
        p_execution_time,
        p_rows_affected,
        p_status,
        p_error_message,
        inet_client_addr(),
        current_setting('request.headers', true)::json->>'user-agent'
    );
EXCEPTION
    WHEN OTHERS THEN
        -- –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
DO $$
DECLARE
    test_result JSONB;
BEGIN
    -- –¢–µ—Å—Ç SELECT –∑–∞–ø–∏—Ç—É
    SELECT result INTO test_result 
    FROM exec_sql('SELECT 1 as test_value, ''Hello Novado'' as message') 
    LIMIT 1;
    
    RAISE NOTICE 'Test exec_sql result: %', test_result;
    
    -- –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ—ó –≤–µ—Ä—Å—ñ—ó
    SELECT exec_sql_simple('SELECT COUNT(*) as total_tables FROM information_schema.tables WHERE table_schema = ''public''') INTO test_result;
    
    RAISE NOTICE 'Test exec_sql_simple result: %', test_result;
END $$;

-- 7. –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –Ω–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
GRANT EXECUTE ON FUNCTION log_sql_execution(TEXT, TEXT, INTEGER, INTEGER, TEXT, TEXT) TO authenticated;

SELECT '–§—É–Ω–∫—Ü—ñ—è exec_sql —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ' as status,
       '–¢–µ–ø–µ—Ä SQL Manager –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ! üöÄ' as message;