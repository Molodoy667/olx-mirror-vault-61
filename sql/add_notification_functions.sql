-- üîî –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –°–ü–û–í–Ü–©–ï–ù–ù–Ø–ú–ò
-- –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏

-- 1. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
CREATE OR REPLACE FUNCTION mark_notifications_as_read(notification_ids UUID[])
RETURNS INTEGER AS $$
DECLARE
    affected_count INTEGER;
BEGIN
    -- –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    UPDATE notifications 
    SET 
        is_read = TRUE,
        updated_at = now()
    WHERE 
        id = ANY(notification_ids) 
        AND user_id = auth.uid()
        AND is_read = FALSE;
    
    GET DIAGNOSTICS affected_count = ROW_COUNT;
    
    RETURN affected_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
CREATE OR REPLACE FUNCTION mark_all_notifications_as_read()
RETURNS INTEGER AS $$
DECLARE
    affected_count INTEGER;
BEGIN
    -- –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    UPDATE notifications 
    SET 
        is_read = TRUE,
        updated_at = now()
    WHERE 
        user_id = auth.uid()
        AND is_read = FALSE;
    
    GET DIAGNOSTICS affected_count = ROW_COUNT;
    
    RETURN affected_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE OR REPLACE FUNCTION get_unread_notifications_count()
RETURNS INTEGER AS $$
BEGIN
    RETURN (
        SELECT COUNT(*)
        FROM notifications 
        WHERE user_id = auth.uid() AND is_read = FALSE
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 4. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
CREATE OR REPLACE FUNCTION create_notification(
    target_user_id UUID,
    notification_type TEXT,
    notification_title TEXT,
    notification_message TEXT DEFAULT NULL,
    notification_data JSONB DEFAULT NULL
)
RETURNS UUID AS $$
DECLARE
    new_notification_id UUID;
BEGIN
    INSERT INTO notifications (
        user_id,
        type,
        title,
        message,
        data,
        is_read
    ) VALUES (
        target_user_id,
        notification_type,
        notification_title,
        notification_message,
        notification_data,
        FALSE
    ) RETURNING id INTO new_notification_id;
    
    RETURN new_notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE OR REPLACE FUNCTION cleanup_old_notifications(days_old INTEGER DEFAULT 30)
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    -- –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç–∞—Ä—à—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤
    DELETE FROM notifications 
    WHERE 
        is_read = TRUE 
        AND created_at < (now() - INTERVAL '1 day' * days_old);
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. –¢—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at —É notifications
CREATE OR REPLACE FUNCTION update_notification_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
DROP TRIGGER IF EXISTS update_notifications_updated_at ON notifications;
CREATE TRIGGER update_notifications_updated_at
    BEFORE UPDATE ON notifications
    FOR EACH ROW
    EXECUTE FUNCTION update_notification_updated_at();

-- 7. –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π
GRANT EXECUTE ON FUNCTION mark_notifications_as_read(UUID[]) TO authenticated;
GRANT EXECUTE ON FUNCTION mark_all_notifications_as_read() TO authenticated;
GRANT EXECUTE ON FUNCTION get_unread_notifications_count() TO authenticated;
GRANT EXECUTE ON FUNCTION create_notification(UUID, TEXT, TEXT, TEXT, JSONB) TO authenticated;

-- –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –æ—á–∏—â–∞—Ç–∏ —Å—Ç–∞—Ä—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
GRANT EXECUTE ON FUNCTION cleanup_old_notifications(INTEGER) TO authenticated;

-- 8. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
CREATE INDEX IF NOT EXISTS idx_notifications_user_unread 
ON notifications (user_id, is_read, created_at DESC) 
WHERE is_read = FALSE;

CREATE INDEX IF NOT EXISTS idx_notifications_created_at 
ON notifications (created_at DESC);

CREATE INDEX IF NOT EXISTS idx_notifications_type 
ON notifications (type, user_id);

SELECT '–§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ! üîî' as status,
       '–ö–Ω–æ–ø–∫–∞ "–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤—Å—ñ" —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î! ‚úÖ' as message;