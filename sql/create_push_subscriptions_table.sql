-- üîî –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü PUSH-–°–ü–û–í–Ü–©–ï–ù–¨
-- –¢–∞–±–ª–∏—Ü—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ –Ω–∞ push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è

-- 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ push_subscriptions
CREATE TABLE IF NOT EXISTS push_subscriptions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    
    -- üì± –î–∞–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
    subscription JSONB NOT NULL,
    endpoint TEXT NOT NULL UNIQUE,
    
    -- üîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∞–Ω—ñ
    p256dh TEXT,
    auth_key TEXT,
    user_agent TEXT,
    
    -- üìä –ú–µ—Ç–∞–¥–∞–Ω—ñ
    is_active BOOLEAN DEFAULT TRUE,
    last_used TIMESTAMP WITH TIME ZONE DEFAULT now(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_preferences —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
CREATE TABLE IF NOT EXISTS user_preferences (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
    
    -- üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    push_notifications_enabled BOOLEAN DEFAULT FALSE,
    email_notifications_enabled BOOLEAN DEFAULT TRUE,
    sms_notifications_enabled BOOLEAN DEFAULT FALSE,
    
    -- üì± –¢–∏–ø–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
    notify_new_messages BOOLEAN DEFAULT TRUE,
    notify_listing_updates BOOLEAN DEFAULT TRUE,
    notify_price_changes BOOLEAN DEFAULT FALSE,
    notify_favorites BOOLEAN DEFAULT TRUE,
    notify_system_updates BOOLEAN DEFAULT TRUE,
    
    -- üïê –ß–∞—Å–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    quiet_hours_start TIME DEFAULT '22:00:00',
    quiet_hours_end TIME DEFAULT '08:00:00',
    timezone VARCHAR(50) DEFAULT 'Europe/Kiev',
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- 3. –î–æ–¥–∞–≤–∞–Ω–Ω—è RLS (Row Level Security)
ALTER TABLE push_subscriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;

-- –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏
CREATE POLICY "Users can manage own push subscriptions" ON push_subscriptions
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
CREATE POLICY "Users can manage own preferences" ON user_preferences
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- –î–æ–∑–≤–æ–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∏—Ç–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE POLICY "Admins can read push subscriptions" ON push_subscriptions
  FOR SELECT USING (auth.uid() IN (SELECT user_id FROM public.admin_users));

-- 4. –§—É–Ω–∫—Ü—ñ—è —Ç–∞ —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
CREATE OR REPLACE FUNCTION update_push_subscriptions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_push_subscriptions_updated_at
  BEFORE UPDATE ON push_subscriptions
  FOR EACH ROW EXECUTE FUNCTION update_push_subscriptions_updated_at();

CREATE OR REPLACE FUNCTION update_user_preferences_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_preferences_updated_at
  BEFORE UPDATE ON user_preferences
  FOR EACH ROW EXECUTE FUNCTION update_user_preferences_updated_at();

-- 5. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ push-—Å–ø–æ–≤—ñ—â–µ–Ω—å (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
CREATE OR REPLACE FUNCTION send_push_notification(
  target_user_id UUID,
  notification_title TEXT,
  notification_body TEXT,
  notification_url TEXT DEFAULT '/'
)
RETURNS BOOLEAN AS $$
DECLARE
  subscription_record RECORD;
  notification_data JSONB;
BEGIN
  -- –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
  notification_data := jsonb_build_object(
    'title', notification_title,
    'body', notification_body,
    'url', notification_url,
    'timestamp', extract(epoch from now())
  );
  
  -- –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  FOR subscription_record IN 
    SELECT * FROM push_subscriptions 
    WHERE user_id = target_user_id AND is_active = TRUE
  LOOP
    -- –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Å–µ—Ä–≤—ñ—Å
    -- –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ webhook –∞–±–æ queue
    RAISE NOTICE 'Sending push notification to endpoint: %', subscription_record.endpoint;
  END LOOP;
  
  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RAISE WARNING 'Failed to send push notification: %', SQLERRM;
    RETURN FALSE;
END;
$$ language 'plpgsql';

-- –ù–∞–¥–∞—î–º–æ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
GRANT EXECUTE ON FUNCTION send_push_notification(UUID, TEXT, TEXT, TEXT) TO authenticated;

SELECT '–¢–∞–±–ª–∏—Ü—ñ push-—Å–ø–æ–≤—ñ—â–µ–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ! üîî' as status;