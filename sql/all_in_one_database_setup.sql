-- üöÄ –í–°–ï –í –û–î–ù–û–ú–£ - –ü–û–í–ù–ê –ù–ê–°–¢–†–û–ô–ö–ê DATABASE MANAGER
-- –¶–µ–π —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä—é—î –í–°–ï —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ Database Manager
-- –í–∏–∫–æ–Ω–∞–π—Ç–µ –¢–Ü–õ–¨–ö–ò –¶–ï–ô –§–ê–ô–õ —ñ –≤—Å–µ –∑–∞–ø—Ä–∞—Ü—é—î!

-- ============================================
-- 1. –°–¢–í–û–†–Æ–Ñ–ú–û exec_sql –§–£–ù–ö–¶–Ü–Æ
-- ============================================
CREATE OR REPLACE FUNCTION public.exec_sql(sql_query TEXT)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  result JSON;
  row_count_val INTEGER;
  start_time TIMESTAMPTZ;
  execution_time INTEGER;
BEGIN
  start_time := clock_timestamp();
  EXECUTE sql_query;
  GET DIAGNOSTICS row_count_val = ROW_COUNT;
  execution_time := EXTRACT(MILLISECONDS FROM (clock_timestamp() - start_time))::INTEGER;
  
  RETURN json_build_object(
    'success', true, 
    'message', 'SQL –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
    'rows_affected', row_count_val,
    'execution_time', execution_time
  );
EXCEPTION WHEN others THEN
  execution_time := EXTRACT(MILLISECONDS FROM (clock_timestamp() - start_time))::INTEGER;
  RETURN json_build_object(
    'success', false, 
    'error', SQLERRM,
    'message', '–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL',
    'execution_time', execution_time
  );
END;
$$;

-- ============================================
-- 2. DATABASE MANAGER RPC –§–£–ù–ö–¶–Ü–á
-- ============================================

-- –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
CREATE OR REPLACE FUNCTION public.get_simple_tables()
RETURNS TABLE (
  table_name TEXT,
  row_count BIGINT,
  table_size TEXT,
  description TEXT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.table_name::TEXT,
    0::BIGINT as row_count,
    '–ù–µ–≤—ñ–¥–æ–º–æ'::TEXT as table_size,
    '–ë–∞–∑–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è'::TEXT as description
  FROM information_schema.tables t
  WHERE t.table_schema = 'public'
    AND t.table_type = 'BASE TABLE'
  ORDER BY t.table_name;
END;
$$;

-- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
CREATE OR REPLACE FUNCTION public.get_simple_structure(table_name_param TEXT)
RETURNS TABLE (
  column_name TEXT,
  data_type TEXT,
  is_nullable TEXT,
  column_default TEXT,
  is_primary_key BOOLEAN,
  is_foreign_key BOOLEAN,
  foreign_table TEXT,
  foreign_column TEXT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    c.column_name::TEXT,
    c.data_type::TEXT,
    c.is_nullable::TEXT,
    COALESCE(c.column_default, '')::TEXT,
    false::BOOLEAN as is_primary_key,
    false::BOOLEAN as is_foreign_key,
    ''::TEXT as foreign_table,
    ''::TEXT as foreign_column
  FROM information_schema.columns c
  WHERE c.table_name = table_name_param
    AND c.table_schema = 'public'
  ORDER BY c.ordinal_position;
END;
$$;

-- –î–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
CREATE OR REPLACE FUNCTION public.get_simple_data(
  table_name_param TEXT,
  page_number INT DEFAULT 1,
  page_size INT DEFAULT 50
)
RETURNS TABLE (
  data JSONB,
  total_count BIGINT,
  page_count INT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  offset_val INT;
  sql_query TEXT;
  result_data JSONB;
  total_rows BIGINT;
BEGIN
  offset_val := (page_number - 1) * page_size;
  
  -- –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
  sql_query := format(
    'SELECT json_agg(row_to_json(t.*)) FROM (SELECT * FROM %I LIMIT %s OFFSET %s) t',
    table_name_param, page_size, offset_val
  );
  
  EXECUTE sql_query INTO result_data;
  
  -- –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—Å–ø—Ä–æ—â–µ–Ω–æ)
  EXECUTE format('SELECT COUNT(*) FROM %I', table_name_param) INTO total_rows;
  
  RETURN QUERY SELECT 
    COALESCE(result_data, '[]'::jsonb) as data,
    total_rows,
    CEIL(total_rows::NUMERIC / page_size)::INT as page_count;
END;
$$;

-- –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π –ë–î
CREATE OR REPLACE FUNCTION public.get_all_functions()
RETURNS TABLE (
  function_name TEXT,
  arguments TEXT,
  return_type TEXT,
  language TEXT,
  function_type TEXT,
  description TEXT,
  source_code TEXT
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.proname::TEXT,
    pg_get_function_arguments(p.oid)::TEXT,
    pg_get_function_result(p.oid)::TEXT,
    l.lanname::TEXT,
    CASE WHEN p.prokind = 'f' THEN 'function'
         WHEN p.prokind = 'p' THEN 'procedure'
         ELSE 'other' END::TEXT,
    COALESCE(d.description, '–ù–µ–º–∞—î –æ–ø–∏—Å—É')::TEXT,
    COALESCE(p.prosrc, '–ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π')::TEXT
  FROM pg_proc p
  JOIN pg_namespace n ON p.pronamespace = n.oid
  JOIN pg_language l ON p.prolang = l.oid
  LEFT JOIN pg_description d ON d.objoid = p.oid
  WHERE n.nspname = 'public' AND l.lanname != 'c'
  ORDER BY p.proname;
END;
$$;

-- ============================================
-- 3. –ü–†–ê–í–ê –î–û–°–¢–£–ü–£
-- ============================================
GRANT EXECUTE ON FUNCTION public.exec_sql(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.exec_sql(TEXT) TO anon;
GRANT EXECUTE ON FUNCTION public.get_simple_tables() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_simple_structure(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_simple_data(TEXT, INT, INT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_all_functions() TO authenticated;

-- ============================================
-- 4. –¢–ï–°–¢–£–í–ê–ù–ù–Ø
-- ============================================
SELECT 'üéâ –í–°–ï –°–¢–í–û–†–ï–ù–û –£–°–ü–Ü–®–ù–û!' as status;
SELECT 'üìä Database Manager –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!' as message;

-- –¢–µ—Å—Ç—É—î–º–æ exec_sql
SELECT public.exec_sql('SELECT ''exec_sql –ø—Ä–∞—Ü—é—î!'' as test') as exec_sql_test;

-- –¢–µ—Å—Ç—É—î–º–æ get_simple_tables
SELECT '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—å: ' || COUNT(*)::TEXT as tables_count 
FROM public.get_simple_tables();

-- –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
SELECT '‚úÖ –ì–û–¢–û–í–û! –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ Database Manager - —Ç–∞–±–ª–∏—Ü—ñ –º–∞—é—Ç—å –∑''—è–≤–∏—Ç–∏—Å—è!' as final_result;